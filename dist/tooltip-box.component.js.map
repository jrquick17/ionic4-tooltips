{"version":3,"file":"tooltip-box.component.js","sourceRoot":"","sources":["../src/tooltip-box.component.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAwB,WAAW,EAAE,uBAAuB,EAAiB,MAAM,eAAe,CAAC;AAC5H,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAuCjF;IA+BE,oBAAmB,UAAsB,EAAU,GAAa;QAAhE,iBAIC;QAJkB,eAAU,GAAV,UAAU,CAAY;QAAU,QAAG,GAAH,GAAG,CAAU;QA7B1C,cAAS,GAAW,WAAW,CAAC;QA8BpD,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CAAO,UAAA,OAAO;YACnC,KAAI,CAAC,WAAW,GAAG,OAAO,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;IA3BD,sBAAI,6BAAK;aAAT,UAAU,IAAY;YACpB,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YACrE,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,QAAQ,GAAG,IAAI,EAAE,IAAI,CAAC,CAAC;QAC3E,CAAC;;;OAAA;IAGD,sBAAI,8BAAM;aAAV,UAAW,GAAW;YACpB,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;QACvE,CAAC;;;OAAA;IAGD,sBAAI,+BAAO;aAAX,UAAY,GAAW;YACrB,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;QACxE,CAAC;;;OAAA;IAED,qCAAgB,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;IACvC,CAAC;IAYD,oCAAe,GAAf;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IArCqB;QAArB,WAAW,CAAC,OAAO,CAAC;iDAAiC;IAGtD;QADC,KAAK,EAAE;4CACK;IAGb;QADC,KAAK,EAAE;2CAIP;IAGD;QADC,KAAK,EAAE;4CAGP;IAGD;QADC,KAAK,EAAE;6CAGP;IArBU,UAAU;QArCtB,SAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE;gBACV,OAAO,CAAC,MAAM,EAAE;oBACd,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;oBACtC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;oBACzC,UAAU,CAAC,uBAAuB,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;iBAC7D,CAAC;aACH;YACD,MAAM,EAAE;gBACJ,gQASD;gBACC,yNAQD;gBACD,4FAA4F;gBAC5F,+FAA+F;gBAC/F,8FAA8F;gBAC9F,6FAA6F;aAC9F;YACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;SAChD,CAAC;OACW,UAAU,CAyCtB;IAAD,iBAAC;CAAA,AAzCD,IAyCC;SAzCY,UAAU","sourcesContent":["import { Component, Input, ElementRef, Renderer, HostBinding, ChangeDetectionStrategy, AfterViewInit } from '@angular/core';\nimport { animate, trigger, style, state, transition } from '@angular/animations';\n\n@Component({\n  selector: 'tooltip-box',\n  template: '{{ text }}',\n  animations: [\n    trigger('fade', [\n      state('visible', style({ opacity: 1})),\n      state('invisible', style({ opacity: 0 })),\n      transition('visible <=> invisible', animate('300ms linear'))\n    ])\n  ],\n  styles: [\n      `\n          :host {\n              background-color: rgba(0,0,0,0.8);\n              color: white;\n              display: inline-block;\n              position: fixed;\n              padding: 15px 25px;\n              font-size: 15px;\n          }\n    `,\n      `\n          :host.has-arrow:before {\n              content: '';\n              border: 5px solid transparent;\n              position: absolute;\n              width: 0;\n              height: 0;\n          }\n    `,\n    ':host.has-arrow.arrow-top:before { border-bottom: 5px solid rgba(0,0,0,0.8); top: -10px; }',\n    ':host.has-arrow.arrow-bottom:before { border-top: 5px solid rgba(0,0,0,0.8); bottom: -10px; }',\n    ':host.has-arrow.arrow-right:before { border-left: 5px solid rgba(0,0,0,0.8); right: -10px; }',\n    ':host.has-arrow.arrow-left:before { border-right: 5px solid rgba(0,0,0,0.8); left: -10px; }'\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipBox implements AfterViewInit {\n\n  @HostBinding('@fade') fadeState: string = 'invisible';\n\n  @Input()\n  text: string;\n\n  @Input()\n  set arrow(side: string) {\n    this.rnd.setElementClass(this.getNativeElement(), 'has-arrow', true);\n    this.rnd.setElementClass(this.getNativeElement(), 'arrow-' + side, true);\n  }\n\n  @Input()\n  set posTop(val: number) {\n    this.rnd.setElementStyle(this.getNativeElement(), 'top', val + 'px');\n  }\n\n  @Input()\n  set posLeft(val: number) {\n    this.rnd.setElementStyle(this.getNativeElement(), 'left', val + 'px');\n  }\n\n  getNativeElement(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  init: Promise<void>;\n\n  private initResolve: Function;\n\n  constructor(public elementRef: ElementRef, private rnd: Renderer) {\n    this.init = new Promise<void>(resolve => {\n      this.initResolve = resolve;\n    });\n  }\n\n  ngAfterViewInit() {\n    this.initResolve();\n  }\n\n}\n"]}